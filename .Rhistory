ti_s
p_fix( ti_s, Ne)
ti_p <- p_fix( ti_s, Ne)
tv_p <- p_fix( tv_s, Ne)
plot( ti_s, ti_p)
ti_bias <- 3
mut_landscape <- c( ti_p*ti_bias, tv_p)
mut_landscape <- mut_landscape/sum(mut_landscape)
mut_landscape
rep("ti",100)
mut_types <- as.factor( c(rep("ti",100), rep("tv",100)))
mut_types
sample(mut_types,10,replace=FALSE,prob=mut_landscape)
sample(mut_types,100,replace=FALSE,prob=mut_landscape)
out <- sample(mut_types,100,replace=FALSE,prob=mut_landscape)
out
hist(out)
sum(out)
out <- sample(1:200,100,replace=FALSE,prob=mut_landscape)
out
mut_types[out]
cnt <- 100
indices <- 1:2*cnt#
fitnesses <- c( ti_s, tv_s )
fitnesses(out)
fitnesses[out]
dat <- cbind(out, mut_types[out], fitnesses[out])
dat
help.search("wilcox")
mean(dat[dat[,2]==1,3])
mean(dat[dat[,2]==2,3])
count(dat[,2]==2)
(dat[,2]==2)
sum(dat[,2]==2)
sum(dat[,2]==1)
cnt <- 1000
ti_s <- rnorm(cnt,0,sd=0.01)#
tv_s <- rnorm(cnt,0,sd=0.01)
ti_p <- p_fix( ti_s, Ne)#
tv_p <- p_fix( tv_s, Ne)
indices <- 1:2*cnt#
fitnesses <- c( ti_s, tv_s )#
mut_types <- as.factor( c(rep("ti",cnt), rep("tv",cnt)))
mut_landscape <- c( ti_p*ti_bias, tv_p)
ti_bias
mut_landscape <- mut_landscape/sum(mut_landscape)
out <- sample(indices,100,replace=TRUE,prob=mut_landscape)
dim(ti_p)
ti_p
mut_landscape
indices
indices <- 1:(2*cnt)
indices
out <- sample(indices,100,replace=TRUE,prob=mut_landscape)
out
sum(mut_types[out]=="ti")
sum(mut_types[out]=="tv")
evolutionary_ti_bias <- sum(mut_types[out]=="ti")/sum(mut_types[out]=="tv")
evolutionary_ti_bias
dat <- cbind(out, mut_types[out], fitnesses[out])
ti_mean_s <- mean(dat[dat[,2]==1,3])
tv_mean_s <-  mean(dat[dat[,2]==2,3])
ti_mean_s
tv_mean_s
dat
mut_types[out]
out <- sample(indices,1000,replace=TRUE,prob=mut_landscape)
evolutionary_ti_bias <- sum(mut_types[out]=="ti")/sum(mut_types[out]=="tv")
evolutionary_ti_bias
dat <- cbind(out, mut_types[out], fitnesses[out])
ti_mean_s <- mean(dat[dat[,2]==1,3])
tv_mean_s <-  mean(dat[dat[,2]==2,3])
ti_mean_s
tv_mean_s
cnt <- 10000
ti_s <- rnorm(cnt,0,sd=0.01)
tv_s <- ti_s
ti_p <- p_fix( ti_s, Ne)
tv_p <- ti_p
indices <- 1:(2*cnt)
fitnesses <- c( ti_s, tv_s )#
mut_types <- as.factor( c(rep("ti",cnt), rep("tv",cnt)))
mut_landscape <- c( ti_p*ti_bias, tv_p)#
mut_landscape <- mut_landscape/sum(mut_landscape)
out <- sample(indices,1000,replace=TRUE,prob=mut_landscape)
evolutionary_ti_bias <- sum(mut_types[out]=="ti")/sum(mut_types[out]=="tv")
evolutionary_ti_bias
dat <- cbind(out, mut_types[out], fitnesses[out])
ti_mean_s <- mean(dat[dat[,2]==1,3])
tV_mean_s <- mean(dat[dat[,2]==2,3])
sum(dat[dat[,2]==2,3])
table(mut_types[out])
ti_mean_s
tV_mean_s
mut_types=="ti"
mut_types=="ti" && out
mut_types=="ti" ** out
mut_types=="ti" & out
mut_types=="ti"[out]
mut_types[out]
fitnesses[out]
library(coin)
wilcox_test( fitnesses[out] ~ mut_types[out])
source("i_was_wrong.R")
run_test()
source("i_was_wrong.R")
run_test()
source("i_was_wrong.R")
run_test()
source("i_was_wrong.R")
run_test()
mut_landscape <- c( ti_p*ti_bias, tv_p)/sum(ti_p*ti_bias, tv_p)
mut_landscape
source("i_was_wrong.R")
mut_landscape
run_test()
run_test(ti_bias=10)
run_test(ti_bias=10,size=10000,sample=500)
run_test(ti_bias=3,size=10000,sample=500)
source("i_was_wrong.R")
run_test(ti_bias=3,size=10000,sample=500)
source("run_DFE_tests.R")
library(coin)#
source("DFE_tests/DFE_functions.R")
source( "DFE_tests/DFE_data.R" )#
all_dfes <- list( firnberg, starita, roscoe, melamed, araya, lind, hietpas, domingo_calap, peris, sanjuan, maclean, rokyta )#
#
# utility function for std error of mean#
sem <- function(x) sqrt(var(x)/length(x))
result <- matrix(,nrow=1,ncol=8)
colnames(result) <- c("Study", "MeanTi", "StdTi", "CountTi", "MeanTv", "StdTv", "CountTv", "U test" )
for (i in 1:length(all_dfes)) { #
	data <- all_dfes[[i]]#
	titv <- as.factor(c(rep("ti",length(data$ti)),rep("tv",length(data$tv))))#
	out <- wilcox_test(c(data$ti,data$tv) ~ titv)#
	result <- rbind( result, c(data$name, mean(data$ti), sem(data$ti), length(data$ti), mean(data$tv), sem(data$tv), length(data$tv), pvalue(out) ) ) #
}
ht_group <- list( firnberg, starita, roscoe, melamed, araya, lind, hietpas )#
lt_group <- list( domingo_calap, peris, sanjuan )#
adaptive_group <- list( maclean, rokyta )
all_groups <- c( ht_group, lt_group, adaptive_group )
meta_result <- matrix(,nrow=1,ncol=4)
colnames(meta_result) <- c("Group", "n", "Fisher", "Stouffer" )
group <- lt_group
names <- lapply(group, function(x) { x$name })
names
test_name = concatenate( names, sep="_" )
test_name = cat( names, sep="_" )
names <- lapply(group, function(x) { print x$name })
names <- lapply(group, function(x) { print(x$name) })
names
help(cat)
paste(names, sep=" ")
paste(names, sep="-")
paste(paste(names), sep="-")
as.character(names)
cat(as.character(names),sep="-"
)
test_name = cat( as.character(names), sep="_" )
test_name <- cat( as.character(names), sep="_" )
test_name
test_name <- paste( as.character(names), sep="_" )
test_name
names
as.character(names)
b <- as.character(names)
cat(b)
cat(b, sep="_")
test_name <- cat(b, sep="_")
names = lapply( group, function(x) { as.character(x$name) })
names
test_name <- cat(as.character(names),sep="_")
b <- (test_name <- cat(as.character(names),sep="_"))
do.call(paste,c(as.character(names),sep="_"))
do.call("paste",c(as.character(names),sep="_"))
do.call("paste",c(names,sep="_"))
test_name <- do.call("paste",c(names,sep="_"))
test_name
names
names[[2]]
lapply( names, function(x) { results[ x, 8 ]})
lapply( names, function(x) { result[ x, 8 ]})
result[ "Peris", 8]
result[ "Peris", 7]
result[ "Peris", 6]
result
result[ result[,1]=="Peris", 8]
result[,1]=="Peris"
result <- result[ -1,]
result
lapply( names, function(x) { result[ results[,1]==x, 8 ]})
lapply( names, function(x) { result[ result[,1]==x, 8 ]})
p_values <- lapply( names, function(x) { result[ result[,1]==x, 8 ]})
sizes <- lapply( names, function(x) { sum(result[ results[,1]==x, c(4,7) ] } )
sizes <- lapply( names, function(x) { sum(result[ results[,1]==x, c(4,7) ]) } )
sizes <- lapply( names, function(x) { sum(result[ result[,1]==x, c(4,7) ]) } )
lapply( names, function(x) { result[ result[,1]==x, c(4,7) ] } )
sizes <- lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) } )
sizes
fisher(p_values, sizes)
source("DFE_tests/DFE_functions.R")
Fisher.test(p_values, sizes)
Fisher.test(p_values)
p_values
p_values <- lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) })
Fisher.test(p_values)
p_values
lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) })
unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))
unlist( p_values)
p_values <- unlist( lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }) )
p_values
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )
Fisher.test(p_values)
Stouffer.test(p_values, sizes)
fisher <- Fisher.test(p_values)
stouffer <- Stouffer.test(p_values, sizes)
pvalue(fisher)
fisher$p.value
typeof(fisher)
dim(fisher)
fisher[1,]
fisher[1]
fisher['Xsq']
rbind( meta_result, test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] )
meta_result <- matrix(,nrow=1,ncol=6)
colnames(meta_result) <- c("Group", "n", "Fisher_Xsq", "Fisher_P", "Stouffer_Z", "Stouffer_P" )
rbind( meta_result, test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] )
meta_result <- rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ))
meta_result
run_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# add results to table  #
meta_result <- rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ))#
}
run_meta( group, result)
meta_result
run_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# add results to table  #
meta_result <- rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ))#
meta_result[ -1, ]#
}
run_meta( group, result)
run_meta( ht_group, result)
ht_subgroup <- list( firnberg, starita, roscoe, melamed, araya, lind, hietpas )#
lt_subgroup <- list( domingo_calap, peris, sanjuan )#
adaptive_subgroup <- list( maclean, rokyta )#
total_group <- list( firnberg, starita, roscoe, melamed, araya, lind, hietpas, domingo_calap, peris, sanjuan, maclean, rokyta ) #
subgroups <- c( ht_group, lt_group, adaptive_group )
meta_result <- matrix(,nrow=1,ncol=6)#
colnames(meta_result) <- c("Group", "n", "Fisher_Xsq", "Fisher_P", "Stouffer_Z", "Stouffer_P" )
for ( group in subgroups ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# add results to table  #
meta_result <- rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ))#
}
for ( group in c( ht_subgroup, lt_subgroup, adaptive_subgroup ) ) {
names <- lapply( group, function(x) { x$name })
}
test_meta <- function( group, result, meta_result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# add results to table  #
meta_result <- rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ))#
}
meta_result <- matrix(,nrow=1,ncol=6)#
colnames(meta_result) <- c("Group", "n", "Fisher_Xsq", "Fisher_P", "Stouffer_Z", "Stouffer_P" )
test_meta( ht_subgroup, result, meta_result )
meta_result
test_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# output a line for the meta table #
return( test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] )#
}
test_meta( ht_subgroup, result)
test_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# output a line for the meta table #
return( c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ) )#
}
test_meta( ht_subgroup, result)
test_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# output a line for the meta table #
rbind( meta_test, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ) )#
}
test_meta( ht_subgroup, result)
test_meta <- function( group, result ) {#
# set up #
names <- lapply( group, function(x) { x$name })#
test_name <- do.call("paste",c(names,sep="_"))#
p_values <- unlist(lapply( names, function(x) { as.numeric(result[ result[,1]==x, 8 ]) }))#
sizes <- unlist(lapply( names, function(x) { sum(as.numeric(result[ result[,1]==x, c(4,7) ])) }) )#
#
# run tests #
fisher <- Fisher.test(p_values)#
stouffer <- Stouffer.test(p_values, sizes)#
#
# output a line for the meta table #
rbind( meta_result, c(test_name, length(p_values), fisher["Xsq"], fisher["p.value"], stouffer["Z"], stouffer["p.value"] ) )#
}
test_meta( ht_subgroup, result)
test_meta( lt_subgroup, result)
source("run_DFE_tests.R")
source("run_tests.R")
source("test/3.R")
source("tests/3.R")
source("run_tests.R")
sqrt(2*0.5*365)
power(10,1.5)
10^^1.5
10**1.5
1E10/0.06
(10**1.5)0.06
(10**1.5)/0.06
1.4e10*1.4e10
1.4e10*1.4e10/2
